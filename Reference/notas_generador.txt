Pcode wave generator

	A partir de la wave 3 spawnea esqueletos
	A partir de la wave 5 spawnea ogros
	A partir de la wave 5 puede hacer waves de muchos slimes (super esqueletos)
	A partir de la wave 5 puede hacer waves de muchos esqueletos (super esqueletos)
	A partir de la wave 8 puede hacer waves de muchos ogros (super ogros)

Entradas (a gd)
	Dificultad
	Ratio_crec_wave (que tanto crece el número de enemigos respecto a la wave pasada)
	ratio_slime (porcentaje de slimes en la oleada)
	ratio_esqueleto (porcentaje de esqueletos en la oleada)
	ratio_ogro (porcentaje de ogros en la oleada)
	prob_super_slimes
	prob_super_esqueletos
	prob_super_ogros
	max_enemies (máximo número de enemigos en la oleada)
	var_num_enemies (varianza en spawn de enemigos +-%)
	
	var num_enemigos : int
	

	
Salida
	wave = [["Enemigo",tiempo],["Enemigo",tiempo2],..]


	main
		enemies_per_wave (Calcula num enemigos en la oleada)
		check_super_wave (Calcula si se genera super oleada)
		for enemy in wave
			Generate_enemy (Calcula tiempo y enemigo en cada spawn)
			
	enemies_per_wave
		num_enemigos = eneimgos_de_inicio + (oleada*ratio_crec_wave+-var_num_enemies)
		if num_enemigos > max_enemies
			num_enemigos = max_enemies
		
	checkSuperWave
		random = generar número entre 0 y 1
		if 0 < random < prob_super_slimes and wave > 3
			ratio_slime = .8
			ratio_esqueleto = .1
			ratio_ogro = .1
		elif prob_super_slimes < random < prob_super_slimes + prob_super_esqueletos and wave > 5
			ratio_slime = .8
			ratio_esqueleto = .1
			ratio_ogro = .1
		elif prob_super_slimes + prob_super_esqueletos < random < prob_super_ogros and wave > 8
			ratio_slime = .8
			ratio_esqueleto = .1
			ratio_ogro = .1
		
		Generate_enemy
		random = numero entre 0 y 1
		
		if 0 < random < ratio_slimes
			ingresa slime al arreglo (tiempo random)
		elif ratio_slimes < random < ratio_slimes + ratio_esqueleto
			ingresa esqueleto al arreglo (tiempo random)
		elif ratio_slimes + ratio_esqueleto < random < ratio_slimes + ratio_esqueleto + ratio_ogro
			ingresa ogro al arreglo (tiempo random)
		
			





extends Node2D

	#print(Data.enemigos["Slime"]["score"])
#Data
var dificultad: int = 1
var ratio_crec_wave = 2
var ratio_slime = .5
var ratio_esqueleto = .3
var ratio_ogro = .2
var prob_super_slimes = .1
var prob_super_esqueletos = .2
var prob_super_ogros = .1
var max_enemigos: int = 50
var var_num_enemies = .4

#Variables
var num_enemigos: int
var rng

var debug_current_wave: int = 6

#Salida
var enemies_per_wave = []
var wave = []

func _ready():
	randomize() (puesto en _ready de gamescene)
	for i in range(1,30):
		debug_current_wave = i
		pickNumEnemies(ratio_crec_wave, var_num_enemies, max_enemigos)
		checkSuperWave(ratio_slime, ratio_esqueleto, ratio_ogro, prob_super_esqueletos, prob_super_slimes, prob_super_ogros)
		for enemy in num_enemigos:
			generateEnemy(enemy)
		#print(wave)
		print(i)
	

func pickNumEnemies(ratio_crec_wave, var_num_enemies, max_enemigos):
	num_enemigos = round(debug_current_wave * (ratio_crec_wave + rand_range(-var_num_enemies,var_num_enemies)))
	if num_enemigos > max_enemigos:
		num_enemigos = max_enemigos

func checkSuperWave(ratio_slime, ratio_esqueleto, ratio_ogro, prob_super_esqueletos, prob_super_slimes, prob_super_ogros):
	rng = randf()
	if rng < prob_super_slimes and debug_current_wave >= 3:
		print("SUPER SLIME")
		ratio_slime = .8
		ratio_esqueleto = .1
		ratio_ogro = .1
	elif prob_super_slimes < rng and rng < prob_super_slimes + prob_super_esqueletos and debug_current_wave >= 5:
		print("SUPER ESQ")
		ratio_slime = .1
		ratio_esqueleto = .8
		ratio_ogro = .1
	elif prob_super_slimes + prob_super_esqueletos < rng and rng < prob_super_slimes + prob_super_esqueletos + prob_super_ogros and debug_current_wave >= 8:
		print("SUPER OGRO")
		ratio_slime = .25
		ratio_esqueleto = .25
		ratio_ogro = .5
		
func generateEnemy(enemy):
	rng = randf()
	if rng < ratio_slime:
		wave.append(["Slime",rand_range(0.5,1)])
	elif ratio_slime < rng and rng < ratio_slime + ratio_esqueleto:
		if debug_current_wave >= 3:
			wave.append(["Esqueleto",rand_range(0.5,2)])
		else:
			wave.append(["Slime",rand_range(0.5,1)])
	elif ratio_slime + ratio_esqueleto < rng and rng < ratio_slime + ratio_esqueleto + ratio_ogro:
		if debug_current_wave >= 5:
			wave.append(["Ogro",rand_range(0.5,5)])
		elif debug_current_wave >= 3:
			wave.append(["Esqueleto",rand_range(0.5,2)])
		else:
			wave.append(["Slime",rand_range(0.5,1)])